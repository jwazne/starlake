name: Release
# Run workflow on commits to the `master` branch
on:
  workflow_dispatch:
env:
  SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
  SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Install graphviz
        run: sudo apt-get install -y graphviz
      - name: Set up Zulu 11
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '11'
      - uses: actions/checkout@v2
        if: ${{ !github.event.repository.fork }}
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT }}'
          cleanup_credentials: false
#      - name: Use gcloud CLI
#        run: gcloud info
#      - name: Run tests & Coverage Report
#        run: SL_SPARK_BIGQUERY_MATERIALIZATION_DATASET=SL_BQ_TEST_DS TEMPORARY_GCS_BUCKET=starlake-app SL_REMOTE_TEST=true sbt coverage test coverageReport
      - name: Release Spark 2/3
        run: SBT_OPTS="-Xss4M -Xms1g -Xmx4g" SL_SPARK_BIGQUERY_MATERIALIZATION_DATASET=SL_BQ_TEST_DS TEMPORARY_GCS_BUCKET=${{ secrets.TEMPORARY_GCS_BUCKET }} GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} SONATYPE_USERNAME=${{ secrets.SONATYPE_USERNAME }} SONATYPE_PASSWORD=${{ secrets.SONATYPE_PASSWORD }}  SL_REMOTE_TEST=true RELEASE_SONATYPE=true sbt 'release with-defaults'

  docker-hub:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Env
        run: |
          cat .versions >> $GITHUB_ENV
          source .versions
          FIRST_LINE=$(head -n 1 version.sbt)
          SL_VERSION=$(echo "$FIRST_LINE" | sed -E 's/.*version := "([0-9]+\.[0-9]+\.?.*)"/\1/')
          echo "SL_VERSION=${SL_VERSION}" >> $GITHUB_ENV
          SL_MAJOR_MINOR_VERSION=$(echo "${SL_VERSION}" | cut -d'.' -f1-2)
          echo "SL_MAJOR_MINOR_VERSION=${SL_MAJOR_MINOR_VERSION}" >> $GITHUB_ENV
          REGISTRY_IMAGE=starlakeai/starlake
          echo "REGISTRY_IMAGE=${REGISTRY_IMAGE}" >> $GITHUB_ENV
          REGISTRY_IMAGE_LATEST=${REGISTRY_IMAGE}:${SL_VERSION:-latest}
          echo "REGISTRY_IMAGE_LATEST=${REGISTRY_IMAGE_LATEST}" >> $GITHUB_ENV

      - name: Prepare
        run: |
          ./scripts/docker-prepare.sh -e dev
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
#                  type=ref,event=branch
#                  type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        id: push
        uses: docker/build-push-action@v6
        with:
          context: "./distrib/docker"
          platforms: ${{ env.PLATFORMS }}
          pull: true
          push: true
          load: false
          tags: ${{ steps.meta.outputs.tags }},${{ env.REGISTRY_IMAGE_LATEST }}
          labels: ${{ steps.meta.outputs.labels }}
              