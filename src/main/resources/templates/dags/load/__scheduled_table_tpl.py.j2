from typing import List

from airflow import DAG

from airflow.utils.task_group import TaskGroup

schedules= [{% for schedule in context.schedules %}
    {
        'schedule': '{{ schedule.schedule }}',
        'cron': {% if schedule.cron is not none %}'{{ schedule.cron }}'{% else %}None{% endif %},
        'domains': [{% for domain in schedule.domains %}
            {
                'name':'{{ domain.name }}',
                'final_name':'{{ domain.final_name}}',
                'tables': [{% for table in domain.tables %}
                    {
                        'name': '{{ table.name }}',
                        'final_name': '{{ table.final_name }}'
                    }{% if not loop.last  %},{% endif %}{% endfor %}
                ]
            }{% if not loop.last  %},{% endif %}{% endfor %}
        ]
    }{% if not loop.last  %},{% endif %}{% endfor %}
]

def generate_dag_name(schedule):
    return (f"{DEFAULT_DAG_NAME}-{schedule['schedule']}" if len(schedules) > 1 else DEFAULT_DAG_NAME)

# [START instantiate_dag]
for schedule in schedules:
    tags = get_context_var(var_name='tags', default_value="", options=options).split()
    datasets: List[Dataset] = []
    for domain in schedule["domains"]:
        tags.append(domain["name"])
        datasets.append(Dataset(keep_ascii_only(domain["name"])))
    with DAG(dag_id=generate_dag_name(schedule),
             schedule_interval=schedule['cron'],
             default_args=DEFAULT_DAG_ARGS,
             catchup=False,
             tags=set([tag.upper() for tag in tags]),
             description=description) as dag:
        start = sl_operator.dummy_op(task_id="start")

        post_tasks = sl_operator.post_tasks(dag=dag)

        all_done = sl_operator.dummy_op(task_id="all_done", outlets=datasets)

        pre_load_tasks = sl_operator.sl_pre_load(
            domain=domain["name"], 
            dag=dag
        )

        def generate_task_group_for_domain(domain):
            with TaskGroup(group_id=sanitize_id(f'{domain["name"]}_load_tasks')) as domain_load_tasks:
                for table in domain["tables"]:
                    load_task_id = sanitize_id(f'{domain["name"]}_{table["name"]}_load')
                    sl_operator.sl_load(
                        task_id=load_task_id, 
                        domain=domain["name"], 
                        table=table["name"]
                    )
            return domain_load_tasks

        all_load_tasks = [generate_task_group_for_domain(domain) for domain in schedule["domains"]]

        if pre_load_tasks:
            start >> pre_load_tasks >> all_load_tasks
        else:
            start >> all_load_tasks

        if post_tasks:
            all_load_tasks >> all_done >> post_tasks
        else:
            all_load_tasks >> all_done
