# This template executes individual bash jobs and requires the following dag generation options set:
#
# - SL_ROOT: The root project path
# - SL_STARLAKE_PATH: the path to the starlake executable
#

import os
import re
from datetime import timedelta
from os import environ

# The DAG object; we'll need this to instantiate a DAG
from airflow import DAG

# Operators; we need this to operate!
from airflow.operators.bash import BashOperator
from airflow.operators.python import BranchPythonOperator

from airflow.utils.task_group import TaskGroup

{% include 'dags/templates/dataproc_operators.py.j2' %}

schedules= [{% for schedule in context.schedules %}
    {
        'schedule': '{{ schedule.schedule }}',
        'cron': {% if schedule.cron is not none %}'{{ schedule.cron }}'{% else %}None{% endif %},
        'domains': [{% for domain in schedule.domains %}
            {
                'name':'{{ domain.name }}',
                'final_name':'{{ domain.final_name}}',
                'tables': [{% for table in domain.tables %}
                    {
                        'name': '{{ table.name }}',
                        'final_name': '{{ table.final_name }}'
                    }{% if not loop.last  %},{% endif %}{% endfor %}
                ]
            }{% if not loop.last  %},{% endif %}{% endfor %}
        ]
    }{% if not loop.last  %},{% endif %}{% endfor %}
]

def generate_dag_name(schedule):
    base_dag_name = os.path.basename(__file__).replace(".py", "").replace(".pyc", "")
    return (f"{base_dag_name}-{schedule['schedule']}" if len(schedules) > 1 else base_dag_name)

# [START instantiate_dag]
for schedule in schedules:
    tags = get_context_var(var_name='tags', default_value="", options=options).split()
    dag_name=generate_dag_name(schedule)
    for domain in schedule["domains"]:
        tags.append(domain["name"])
    with DAG(dag_id=dag_name,
             schedule_interval=schedule['cron'],
             default_args=DEFAULT_DAG_ARGS,
             catchup=False,
             tags=set([tag.upper() for tag in tags]),
             description=description) as dag:
        start = dummy_op(task_id="start")

        end = dummy_op(task_id='end')

        cluster_name=generate_cluster_name(dag_name)

        create_cluster = create_dataproc_cluster(
            cluster_name=cluster_name,
            task_id=sanitize_id(f'{domain["name"]}_create_dataproc_cluster')
        )

        delete_cluster = delete_dataproc_cluster(
            cluster_name=cluster_name,
            task_id=sanitize_id(f'{domain["name"]}_delete_dataproc_cluster')
        )

        incoming_path = get_context_var(var_name='incoming_path', default_value=f'{SL_ROOT}/incoming', options=options)

        def generate_task_group_for_domain(domain):
            list_files = BashOperator(
                task_id=sanitize_id(f'{domain["name"]}_list_files'),
                bash_command=f'gsutil ls {incoming_path}/{domain["name"]}/* | wc -l',
                do_xcom_push=True,
                pool=DEFAULT_POOL
            )

            start_import = dummy_op(task_id=sanitize_id(f'{domain["name"]}_start_import'), trigger_rule=TriggerRule.ONE_SUCCESS)

            start_load = dummy_op(task_id=sanitize_id(f'{domain["name"]}_start_load'), trigger_rule=TriggerRule.ALL_SUCCESS)

            skip_load = dummy_op(task_id=sanitize_id(f'{domain["name"]}_skip_load'), trigger_rule=TriggerRule.ONE_SUCCESS)

            skip_load >> end

            def f_skip_or_start(**kwargs):
                task_instance = kwargs['ti']
                files_tuple = task_instance.xcom_pull(key=None, task_ids=[list_files.task_id])
                print('Number of files found: {}'.format(files_tuple))
                files_number = files_tuple[0]
                if int(files_number) > 1:
                    return start_import.task_id
                else:
                    return skip_load.task_id

            skip_or_start = BranchPythonOperator(
                task_id = sanitize_id(f'{domain["name"]}_skip_or_start'),
                python_callable = f_skip_or_start,
                trigger_rule = 'one_success',
                provide_context = True,
                pool=DEFAULT_POOL
            )

            start >> list_files >> skip_or_start >> [start_import, skip_load]

            import_task_id = sanitize_id(f'{domain["name"]}_import')
            import_task = importJob(
                cluster_name=cluster_name,
                task_id=import_task_id, 
                domain=domain["name"]
            )

            start_import >> create_cluster >> import_task >> start_load

            delete_cluster >> end

            with TaskGroup(group_id=sanitize_id(f'{domain["name"]}_load_tasks')) as domain_load_tasks:
                for table in domain["tables"]:
                    load_task_id = sanitize_id(f'{domain["name"]}_{table["name"]}_load')
                    load_task = loadJob(
                        cluster_name=cluster_name,
                        task_id=load_task_id, 
                        project_id=PROJECT_ID, 
                        domain=domain["name"], 
                        table=table["name"]
                    )
                    start_load >> load_task >> delete_cluster
            return domain_load_tasks

        all_load_tasks = [generate_task_group_for_domain(domain) for domain in schedule["domains"]]

