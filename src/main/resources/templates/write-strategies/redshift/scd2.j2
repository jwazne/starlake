
{% if strategyOn == 'TARGET' %}

    insert into stg_customer
    with stg as (
    select
    custkey as stg_custkey, name as stg_name,
    address as stg_address, nationkey as stg_nationkey,
    phone as stg_phone, acctbal as stg_acctbal,
    mktsegment as stg_mktsegment, comment as stg_comment,
    effective_dt as stg_effective_dt,
    FNV_HASH(address,FNV_HASH(phone)) as stg_track_hash
    from
    src_customer
    )
    select
    s.* ,
    case when c.c_custkey is null then 1 else 0 end new_ind,
    case when c.c_custkey is not null
    and s.stg_track_hash <> track_hash then 1 else 0 end track_ind
    from
    stg s
    left join customer_dim c
    on s.stg_custkey = c.c_custkey
    and c.record_end_ts='2999-12-31'
    ;


INSERT INTO {{ tableFullName }}({{ tableColumnsCsv }}, `{{ strategyStartTs }}`, `{{ strategyEndTs }}`)
SELECT {{renderIncominTableColumns(quotedTableColumnNames)}}, NULL AS {{ strategyStartTs }}, NULL AS {{ strategyEndTs }} FROM ({{ selectStatement }}) SL_INCOMING
LEFT JOIN {{ tableFullName }} SL_EXISTING ON ({{ strategyKeyJoinCondition }} AND SL_EXISTING.{{strategyEndTs}} IS NULL)
WHERE {% for key in quotedStrategyKey %}SL_EXISTING.{{ key }} IS NULL {% if not loop.last %} AND {% endif %}{%endfor%};

CREATE  TEMPORARY TABLE SL_INCOMING AS
SELECT {{ tableColumnsCsv }}, NULL AS {{ strategyStartTs }}, NULL AS {{ strategyEndTs }} FROM {{ selectStatement }};
FROM {{selectStatement}};

INSERT INTO {{ tableFullName }}
SELECT SL_INCOMING.*, NULL AS {{ strategyStartTs }}, NULL AS {{ strategyEndTs }} FROM ({{ selectStatement }}) AS SL_INCOMING
LEFT JOIN {{ tableFullName }} SL_EXISTING ON ({{ strategyKeyJoinCondition }} AND SL_EXISTING.{{strategyEndTs}} IS NULL)
WHERE {% for key in quotedStrategyKey %}SL_EXISTING.{{ key }} IS NULL {% if not loop.last %} AND {% endif %}{%endfor%};

INSERT INTO {{ tableFullName }}
SELECT SL_INCOMING.*, NULL AS {{ strategyStartTs }}, NULL AS {{ strategyEndTs }} FROM ({{ selectStatement }}) AS SL_INCOMING
LEFT JOIN {{ tableFullName }}
ON ({{ renderStrategyKeyJoinCondition(tableFullName, 'SL_INCOMING', quotedStrategyKey) }} AND {{ tableFullName }}.{{strategyEndTs}} IS NULL)
WHERE {% for key in quotedStrategyKey %}{{ tableFullName }}.{{ key }} IS NULL {% if not loop.last %} AND {% endif %}{%endfor%};

MERGE INTO {{ tableFullName }} USING (
    SELECT SL_INCOMING.* FROM {{ selectStatement }} SL_INCOMING, {{ tableFullName }} SL_EXISTING
    WHERE   {{strategyKeyJoinCondition}} AND 
            SL_EXISTING.{{ strategyEndTs }} IS NULL AND 
            SL_INCOMING.{{ strategyTimestamp }} > SL_EXISTING.{{ strategyTimestamp }}
) SL_INCOMING ON ({{ strategyKeyJoinCondition }})
WHEN MATCHED THEN UPDATE {{ tableUpdateSetExpression }}, {{strategyStartTs}} = {{ strategyTimestamp }}, {{ strategyEndTs }} = NULL;

   
{% else %} {# strategyOn == 'SOURCE_AND_TARGET' #}

MERGE INTO  {{ tableFullName }} SL_EXISTING
USING (
SELECT  {{ tableColumnsCsv }}
FROM (
SELECT  {{ tableColumnsCsv }}, ROW_NUMBER() OVER (PARTITION BY $mergeKeys  ORDER BY (select 0)) AS SL_SEQ
FROM ({{ selectStatement }})
) WHERE SL_SEQ = 1

) SL_INCOMING
ON ( {{ strategyKeyJoinCondition }})
WHEN MATCHED AND SL_INCOMING.{{ strategyTimestamp }} > SL_EXISTING.{{ strategyTimestamp }} THEN  UPDATE {{ tableUpdateSetExpression }}
WHEN NOT MATCHED THEN {{ tableInsert }}




INSERT INTO {{ tableFullName }}({{ tableColumnsCsv }})
SELECT {{ tableColumnsCsv }}, NULL AS {{ strategyStartTs }}, NULL AS {{ strategyEndTs }} FROM ({{ selectStatement }}) AS SL_INCOMING
LEFT JOIN {{ tableFullName }} SL_EXISTING ON ({{ strategyKeyJoinCondition }} AND SL_EXISTING.{{strategyEndTs}} IS NULL)
WHERE {% for key in strategyKey %}SL_EXISTING.{{ key }} IS NULL {% if not loop.last %} AND {% endif %}{%endfor%};

MERGE INTO {{ tableFullName }} SL_EXISTING USING (
    SELECT {% for columnName in tableColumnNames %}SL_INCOMING.{{ columnName }}{% if not loop.last %}, {% endif %}{%endfor%} FROM
        (   SELECT {{ tableColumnsCsv }}, ROW_NUMBER() OVER (PARTITION BY {{ strategyKeyCsv }} ORDER BY {{ strategyTimestamp }} DESC) AS SL_SEQ
            FROM ({{ selectStatement }}) AS SL_INCOMING
            WHERE SL_SEQ = 1 

        ) AS SL_INCOMING, 
        {{ tableFullName }} SL_EXISTING
        WHERE   {{strategyKeyJoinCondition}} AND 
            SL_EXISTING.{{ strategyEndTs }} IS NULL AND 
            SL_INCOMING.{{ strategyTimestamp }} > SL_EXISTING.{{ strategyTimestamp }}
) SL_INCOMING 
ON ({{ strategyKeyJoinCondition }})
WHEN MATCHED THEN UPDATE {{ tableUpdateSetExpression }}, {{strategyStartTs}} = SL_INCOMING.{{ strategyTimestamp }}, {{ strategyEndTs }} = NULL;

   


{%  endif %}
