
{#

{{ sinkConnectionRef }}
{{ sinkClustering }}
{{ sinkDays }}
{{ sinkRequirePartitionFilter }}
{{ sinkMaterializedView }}
{{ sinkEnableRefresh }}
{{ sinkRefreshIntervalMs }}
{{ sinkId }}
{{ sinkFormat }}
{{ sinkExtension }}
{{ sinkPartition }}
{{ sinkCoalesce }}
{{ sinkOptions }}


{{ tableDatabase }}
{{ tableDomain }}
{{ tableName }}
{{ tableColumnNames }}
{{ tableFullName }}
{{ selectStatement }}
{{ tableExists }}
{{ tableTruncate }}
{{ tableParamsForInsertSql }}
{{ tableParamsForUpdateSql }}
{{ tableInsert }}
{{ tableUpdate }}
{{ tableColumnsCsv }}
{{ tableIncomingColumnsCsv }}
{{ materializedView }}

{{ engineQuote }}
{{ engineCanMerge }}
{{ engineViewPrefix }}
{{ enginePreActions }}
{{ engineStrategyBuilder }}

{{ strategyType }}
{{ strategyTypes }}
{{ strategyKey }}
{{ strategyTimestamp }}
{{ strategyQueryFilter }}
{{ strategyOn }}
{{ strategyStartTs }}
{{ strategyEndTs }}
{{ strategyKeyCsv }}
{{ strategyKeyJoinCondition }}

#}

CREATE OR REPLACE TEMPORARY VIEW SL_INCOMING AS {{ selectStatement }};

{%- if strategyOn == 'TARGET' -%}

MERGE INTO  {{ tableFullName }} SL_EXISTING USING SL_INCOMING ON ( {{ strategyKeyJoinCondition }})
WHEN MATCHED AND SL_INCOMING.{{ strategyTimestamp }} > SL_EXISTING.{{ strategyTimestamp }} THEN  {{ tableUpdate }}
WHEN NOT MATCHED THEN {{ tableInsert }}

{%- else -%} {# strategyOn == 'SOURCE_AND_TARGET' #}

CREATE OR REPLACE TEMPORARY VIEW SL_VIEW_WITH_ROWNUM AS
SELECT  *, ROW_NUMBER() OVER (PARTITION BY {{ strategyKeyCsv }} ORDER BY {{ strategyTimestamp }}) AS SL_SEQ
FROM SL_INCOMING;

CREATE OR REPLACE TEMPORARY VIEW SL_DEDUP AS SELECT {{ tableColumnsCsv }} 
FROM SL_VIEW_WITH_ROWNUM 
WHERE SL_SEQ = 1;

MERGE INTO {{ tableFullName }} SL_EXISTING 
USING SL_DEDUP AS SL_INCOMING ON ( {{ strategyKeyJoinCondition }})
WHEN MATCHED AND SL_INCOMING.{{ strategyTimestamp }} > SL_EXISTING.{{ strategyTimestamp }} THEN  {{ tableUpdate }}
WHEN NOT MATCHED THEN {{ tableInsert }}


{%  endif %}
